            +---------------------------+
            |         CS 326            |
            | PROJECT 3: VIRTUAL MEMORY |
            |      DESIGN DOCUMENT      |
            +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

RR
Lihuan Xie <lxie@cs.usfca.edu>
Peter Burns <rictic@gmail.com>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

enum special_page {
  EXEC,
  FILE,
  SWAP,
  ZERO
};
  
//this just defines the head of the struct which all special
// page elements must begin with
struct special_page_elem {
  enum special_page type;
  struct hash_elem elem;
  uint32_t virtual_page;
};


struct exec_page {
  enum special_page type;
  struct hash_elem elem;
  uint32_t virtual_page;
  struct file *elf_file;
  size_t offset; //number of bytes into the file to start
  size_t zero_after; //after this offset, the rest should be zeros
  bool writable;
};

struct file_page {
  enum special_page type;
  struct hash_elem elem;
  uint32_t virtual_page;
  struct file *source_file;
  size_t offset; //number of pages into the file
  size_t zero_after; //after this offset, the rest should be zeros
};

struct swap_page {
  enum special_page type;
  struct hash_elem elem;
  uint32_t virtual_page;
  struct swap_slot *slot;
  bool dirty; //Whether the page before evicting to SWAP is dirty or not. 
  struct special_page_elem *evicted_page; //the evicted page before swaping
};

struct zero_page {
  enum special_page type;
  struct hash_elem elem;
  uint32_t virtual_page;
};

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

We have frame structure in frame.h which is for storing the allocated 
frame, then adding to the frame list for the frame table.
We have user virtual memory address, the thread which contains that 
frame, and other useful information in the frame structure. So with the 
given user virtual memory address of a given page, we could walk through
the frame list and locate that frame with the same user virtual memory 
address.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

I only access memory by using either the PTE or user virtual memory address 
on the frame structure, avoid accessing it from the kernel virtual memory 
in user pool.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

In the simple case, where there is enough memory for both requests,
it's simply a matter of holding a lock on the frame table when we
put the frame struct in.

When there is not enough memory however, things get a bit more interesting.
To satisfy this request we need to choose a frame to evict, evict it,
and give the freed memory to a requester.  We start by getting a lock on
the frame table and turning interrupts off.  Then we choose a frame and
get its supplemental page table entry (so that we know how to evict it),
then we remove the frame from its thread's page table, and obtain a lock
on its thread's supplemental page table.  After this, we can enable interrupts
again.  Strictly speaking, we probably only need interrupts disabled for the 
last two steps.

Now, if the thread whose page we just evicted tries to access it, it will end
up waiting on us in the page fault handler while we finish evicting it.

We evict the frame, free its memory, release the locks we hold, and return.  
However in the mean time someone else could have grabbed that memory, so
instead of assuming that we'll get the memory we just freed, we stay in
a loop – freeing a page of memory and then trying to get a page of memory –
until we succeed.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

We chose a list for the frame table because it made walking the list in
a circle and updating access bits simple.

If it seemed to be a performance bottleneck (and it probably would, given
enough memory in use at once), we'd probably rewrite it to use a hash table.

We had enough trouble with just a list for our initial implementation though.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

TODO PETER--------------

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

I should point out that we have a hand pointer pointing to a frame in 
frame table. Besides, we are applying the "second chance" algorithm 
for the replacement.

First of all, if page cannot be allocated by palloc_get_page(), we will 
jump to the replacement function.
Secondly, we use the hand pointer to find a frame with Access bit set 
to 0. If the hand with Access bit being set, we will clear the bit and 
push it back to the frame list. The hand then points to the next one 
circularly.
After choosing a frame to evict, we first mark it as not present. Then, 
we will write the data back to file if that frame is storing a file data, 
or we swap it to the swap disk if the data in that page is dirty. 
Otherwise, we just discard that frame without any action.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

We simply call pagedir_clear_page(Q->pagedir, frame->virtual_address)
with interrupts disabled.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

If there's no entry in the supplemental page table for the faulted page,
the faulted address is below PHYS_BASE, above STACK_BOTTOM (set by default
to give 8MB of stack), and the address is no more than 32 bytes ahead of esp,
then we assume that it's an access of a virgin stack page, and we install a
page.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

The only place where we're vulnerable to deadlock is when more than one
thread is trying to hold more than one lock.  This is really only an issue
in our frame replacement code, because it's the only code that deals with
multiple locks at once.  Our other code takes pains to only hold a single
lock at once, and as briefly as possible.

TODO PETER------

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

This is explained some in A4 above.  One of the first things P does
when evicting is it removes the frame F from Q's page table, and 
acquires a lock on Q's supplemental page table all with interrupts
disabled.  This way, Q can't change F while we evict it because it
can't access it, because it's not in Q's page table.  P holds the lock
on Q's supplemental page table until it is finished with the eviction.  
This way, if Q page faults, it will block when it checks its supplemental 
page table until the page is ready again. 

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

We don't.  In fact, that's perfectly fine in our design.  If the page
fault handler is writing to a page, and suddenly the page is evicted
out from under it, then page_fault() will throw a page fault exception when it
next writes to the page.  This second call to page_fault() will wait for the 
page to finish being written out, then it will restore the page, and return
to the original call to page_fault(), which finishes restoring the page.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

We use page faults to bring them back in.  One of the first things we
check in our page fault handler is whether there's an entry in the
supplemental page table for the given page.  We also know the original
stack pointer, so we can also handle stack growth.  So really, a page
fault in the kernel is just like a page fault in a user program, except
when it's truly an error.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We have a global lock for getting a new frame, and expiring an old one,
but these locks are held for a short time.  Otherwise our locking is
per-thread, which allows for a lot of parallelism, so long as you're not
out of memory.

Since the frame table has to be global, we didn't see a way to use any
more fine-grained locking mechanism.  However, there are a few places where we
could probably hold onto the frame lock more briefly.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

//the first three parts are standard supplementary page table entry
// values, the last three just keep track of the file and our
// place within it
struct file_page {
  enum special_page type;
  struct hash_elem elem;
  uint32_t virtual_page;
  struct file *source_file;
  size_t offset; //number of pages into the file
  size_t zero_after; //after this offset, the rest should be zeros
};


---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

The page fault process is pretty simple really.  Instead of zeroing
the page, or reading it in from the swap disk, we just read in the
appropriate section of the file.

In eviction, mmaped pages are a special case, because they never need
to be written to swap.  If they've been written to, then we simply
write the page back into the file at the appropriate offset.  Otherwise
we evict them without saving any information at all.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

We keep an entry in the supplemental page table for each page of memory
that's been paged out to swap, a file, an object file, or has been zerod
as part of the data segment of an object file.  If the new mapping overlays
with any of this, or if it's in the stack area, we don't allow the memory
to be mapped.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

We use one page fault handler for both EXEC and FILE pages, save that
EXEC pages also know whether or not they should be writable.

When expiring pages, FILE pages are an exception, but EXEC pages are not,
so no code is shared there.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

As in the last assignment, it wasn't too hard, but there was one test which
was very good at shaking out all of our bugs:  page-parallel

Getting it to work correctly seems to require an order of magnitude more effort
than any of the other tests.

I doubt this is unexpected or undesirable.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Just working with page eviction and retrieval was quite eye opening, and
definitely worthwhile.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

Without any metrics it's difficult to know if our algorithm for choosing
a page to evict is fair or efficient.  If there was a part of this assignment
that's changed, cut, or provided for us, I think that would make a good 
candidate.
